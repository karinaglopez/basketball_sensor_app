services:
  db:
    image: postgres:13
    env_file:
      - ./env_files/postgres.env
    ports:
      - "5432:5432"
    volumes:
      - ./postgres/data:/var/lib/postgresql/data
    networks:
      - kafka_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 2181 || exit -1"]
      interval: 10s
      timeout: 5s
      retries: 3
    ports:
      - 22181:2181
    networks:
      - kafka_network

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      zookeeper:
        condition: service_healthy
    env_file:
      - ./env_files/kafka_zookeper.env
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      interval: 30s
      timeout: 10s
      retries: 5
    ports:
      - 29092:29092
    networks:
      - kafka_network

  mosquitto:
    image: eclipse-mosquitto:latest
    container_name: mosquitto
    environment:
      - TZ=Europe/Madrid    
    volumes:
      - ./mqtt/config/mosquitto.conf:/mosquitto/config/mosquitto.conf:ro
      - ./mqtt/config/acl_file:/mosquitto/config/acl_file:ro
      - ./mqtt/config/password_file:/mosquitto/config/password_file:rw
      - ./certs:/mosquitto/config/certs 
      - ./mqtt/log:/mosquitto/log
    ports:
      - 1883:1883
      - 8883:8883
    restart: unless-stopped
    networks:
      - kafka_network
    healthcheck:
      test: ["CMD", "mosquitto_pub", "-h", "localhost", "-t", "/health_status", "-m", "test", "--cafile", "/mosquitto/config/certs/ca.crt"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka_producer:
    build:
      context: .
      dockerfile: ./kafka_producer/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      mosquitto:
        condition: service_healthy
    env_file:
      - ./env_files/kafka.env
      - ./env_files/mqtt.env
    volumes:
      - ./certs/ca.crt:/app/certs/ca.crt:ro 
    networks:
      - kafka_network

  kafka_consumer:
    build:
      context: .
      dockerfile: ./kafka_consumer/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      db:
        condition: service_healthy
    env_file:
      - ./env_files/postgres.env
      - ./env_files/kafka.env
    networks:
      - kafka_network

networks:
  kafka_network:
    driver: bridge